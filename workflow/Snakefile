from os.path import realpath
from os.path import split as pathsplit
from os.path import basename
import subprocess
from snakemake.remote.FTP import RemoteProvider as FTPRemoteProvider
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
import sys
import random
import json

# Remotes
HTTP = HTTPRemoteProvider()
FTP = FTPRemoteProvider()

# DETERMINE REMOTE OR LOCAL RESOURCE
def determine_resource(path):
    if "ftp://" in path:
         return FTP.remote(path, keep_local=True, immediate_close = True)
    elif "http://" in path:
         return HTTP.remote(path)
    elif "https://" in path:
         return HTTP.remote(path)
    else:
        return path

singularity: "docker://continuumio/miniconda3"
configfile: "config/config.yaml"
pepfile: "config/pep.yaml"

MAIN_CONFIG = config.get("MAIN_CONFIG",'config/config.yaml')

subworkflow custom_genome:
    workdir:
        "../../gte21-custom-genome/"
    snakefile:
        "../../gte21-custom-genome/workflow/Snakefile"
    configfile:
        MAIN_CONFIG

# variables
RANDOM_SEED = config.get("RANDOM_SEED",2020)
random.seed(RANDOM_SEED)

rule all:
    input:
        "results/cellranger/idx",
        expand("results/scanpy/{g}/celltypes.h5ad",g=config['SCRNA_GROUPS']),
        expand("results/scanpy/{g}/{f}.csv",g=config['SCRNA_GROUPS'],f=['var','obs','obsm']),
        expand("results/scanpy/{g}/clusters-to-celltypes.csv",g=config['SCRNA_GROUPS']),
        expand("results/scanpy/{g}/lognorm-expression.csv.gz",g=config['SCRNA_GROUPS']),
        expand("results/scanpy/{g}/scaled-expression.csv.gz",g=config['SCRNA_GROUPS'])
        #expand("results/cellranger/{s}.done",s=config['SCRNA_GROUPS']['larval-w1118-testes'])

include: "rules/cellranger.smk"
include: "rules/process-with-scanpy.smk"
